"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const sanitizeFallbackLocale_1 = __importDefault(require("../localization/sanitizeFallbackLocale"));
const traverseFields_1 = __importDefault(require("./traverseFields"));
const deepCopyObject_1 = __importDefault(require("../utilities/deepCopyObject"));
async function performFieldOperations(entityConfig, args) {
    const { data, originalDoc: fullOriginalDoc, docWithLocales, operation, hook, req, id, req: { payloadAPI, locale, }, overrideAccess, flattenLocales, unflattenLocales = false, showHiddenFields = false, isVersion = false, skipValidation = false, } = args;
    const fullData = (0, deepCopyObject_1.default)(data);
    const fallbackLocale = (0, sanitizeFallbackLocale_1.default)(req.fallbackLocale);
    let depth = 0;
    if (payloadAPI === 'REST' || payloadAPI === 'local') {
        depth = (args.depth || args.depth === 0) ? parseInt(String(args.depth), 10) : this.config.defaultDepth;
        if (depth > this.config.maxDepth)
            depth = this.config.maxDepth;
    }
    const currentDepth = args.currentDepth || 1;
    // Maintain a top-level list of promises
    // so that all async field access / validations / hooks
    // can run in parallel
    const valuePromises = [];
    const validationPromises = [];
    const accessPromises = [];
    const relationshipPopulations = [];
    const hookPromises = [];
    const unflattenLocaleActions = [];
    const transformActions = [];
    const errors = [];
    // //////////////////////////////////////////
    // Entry point for field validation
    // //////////////////////////////////////////
    (0, traverseFields_1.default)({
        fields: entityConfig.fields,
        data: fullData,
        originalDoc: fullOriginalDoc,
        path: '',
        flattenLocales,
        locale,
        fallbackLocale,
        accessPromises,
        operation,
        overrideAccess,
        req,
        id,
        relationshipPopulations,
        depth,
        currentDepth,
        hook,
        hookPromises,
        fullOriginalDoc,
        fullData,
        valuePromises,
        validationPromises,
        errors,
        payload: this,
        showHiddenFields,
        unflattenLocales,
        unflattenLocaleActions,
        transformActions,
        docWithLocales,
        isVersion,
        skipValidation,
    });
    if (hook === 'afterRead') {
        transformActions.forEach((action) => action());
    }
    const hookResults = hookPromises.map((promise) => promise());
    await Promise.all(hookResults);
    const valueResults = valuePromises.map((promise) => promise());
    await Promise.all(valueResults);
    const validationResults = validationPromises.map((promise) => promise());
    await Promise.all(validationResults);
    if (errors.length > 0) {
        throw new errors_1.ValidationError(errors);
    }
    if (hook === 'beforeChange') {
        transformActions.forEach((action) => action());
    }
    unflattenLocaleActions.forEach((action) => action());
    const accessResults = accessPromises.map((promise) => promise());
    await Promise.all(accessResults);
    const relationshipPopulationResults = relationshipPopulations.map((population) => population());
    await Promise.all(relationshipPopulationResults);
    return fullData;
}
exports.default = performFieldOperations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybUZpZWxkT3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWVsZHMvcGVyZm9ybUZpZWxkT3BlcmF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHNDQUE0QztBQUM1QyxvR0FBNEU7QUFDNUUsc0VBQThDO0FBTTlDLGlGQUF5RDtBQW9CMUMsS0FBSyxVQUFVLHNCQUFzQixDQUFnQixZQUErRCxFQUFFLElBQWU7SUFDbEosTUFBTSxFQUNKLElBQUksRUFDSixXQUFXLEVBQUUsZUFBZSxFQUM1QixjQUFjLEVBQ2QsU0FBUyxFQUNULElBQUksRUFDSixHQUFHLEVBQ0gsRUFBRSxFQUNGLEdBQUcsRUFBRSxFQUNILFVBQVUsRUFDVixNQUFNLEdBQ1AsRUFDRCxjQUFjLEVBQ2QsY0FBYyxFQUNkLGdCQUFnQixHQUFHLEtBQUssRUFDeEIsZ0JBQWdCLEdBQUcsS0FBSyxFQUN4QixTQUFTLEdBQUcsS0FBSyxFQUNqQixjQUFjLEdBQUcsS0FBSyxHQUN2QixHQUFHLElBQUksQ0FBQztJQUVULE1BQU0sUUFBUSxHQUFHLElBQUEsd0JBQWMsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUV0QyxNQUFNLGNBQWMsR0FBRyxJQUFBLGdDQUFzQixFQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUVsRSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFFZCxJQUFJLFVBQVUsS0FBSyxNQUFNLElBQUksVUFBVSxLQUFLLE9BQU8sRUFBRTtRQUNuRCxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUV2RyxJQUFJLEtB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